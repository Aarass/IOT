// @generated by protobuf-ts 2.11.1 with parameter long_type_string
// @generated from protobuf file "datamanager.proto" (syntax proto3)
// tslint:disable
import { Empty } from "./google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message PowerConsumptionReport
 */
export interface PowerConsumptionReport {
    /**
     * @generated from protobuf field: string date = 1
     */
    date: string;
    /**
     * @generated from protobuf field: string time = 2
     */
    time: string;
    /**
     * @generated from protobuf field: string global_active_power = 3
     */
    globalActivePower: string;
    /**
     * @generated from protobuf field: string global_reactive_power = 4
     */
    globalReactivePower: string;
    /**
     * @generated from protobuf field: string voltage = 5
     */
    voltage: string;
    /**
     * @generated from protobuf field: string global_intensity = 6
     */
    globalIntensity: string;
    /**
     * @generated from protobuf field: string sub1 = 7
     */
    sub1: string;
    /**
     * @generated from protobuf field: string sub2 = 8
     */
    sub2: string;
    /**
     * @generated from protobuf field: string sub3 = 9
     */
    sub3: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class PowerConsumptionReport$Type extends MessageType<PowerConsumptionReport> {
    constructor() {
        super("PowerConsumptionReport", [
            { no: 1, name: "date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "global_active_power", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "global_reactive_power", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "voltage", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "global_intensity", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "sub1", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "sub2", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "sub3", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PowerConsumptionReport>): PowerConsumptionReport {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.date = "";
        message.time = "";
        message.globalActivePower = "";
        message.globalReactivePower = "";
        message.voltage = "";
        message.globalIntensity = "";
        message.sub1 = "";
        message.sub2 = "";
        message.sub3 = "";
        if (value !== undefined)
            reflectionMergePartial<PowerConsumptionReport>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PowerConsumptionReport): PowerConsumptionReport {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string date */ 1:
                    message.date = reader.string();
                    break;
                case /* string time */ 2:
                    message.time = reader.string();
                    break;
                case /* string global_active_power */ 3:
                    message.globalActivePower = reader.string();
                    break;
                case /* string global_reactive_power */ 4:
                    message.globalReactivePower = reader.string();
                    break;
                case /* string voltage */ 5:
                    message.voltage = reader.string();
                    break;
                case /* string global_intensity */ 6:
                    message.globalIntensity = reader.string();
                    break;
                case /* string sub1 */ 7:
                    message.sub1 = reader.string();
                    break;
                case /* string sub2 */ 8:
                    message.sub2 = reader.string();
                    break;
                case /* string sub3 */ 9:
                    message.sub3 = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PowerConsumptionReport, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string date = 1; */
        if (message.date !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.date);
        /* string time = 2; */
        if (message.time !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.time);
        /* string global_active_power = 3; */
        if (message.globalActivePower !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.globalActivePower);
        /* string global_reactive_power = 4; */
        if (message.globalReactivePower !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.globalReactivePower);
        /* string voltage = 5; */
        if (message.voltage !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.voltage);
        /* string global_intensity = 6; */
        if (message.globalIntensity !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.globalIntensity);
        /* string sub1 = 7; */
        if (message.sub1 !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.sub1);
        /* string sub2 = 8; */
        if (message.sub2 !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.sub2);
        /* string sub3 = 9; */
        if (message.sub3 !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.sub3);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PowerConsumptionReport
 */
export const PowerConsumptionReport = new PowerConsumptionReport$Type();
/**
 * @generated ServiceType for protobuf service DataManager
 */
export const DataManager = new ServiceType("DataManager", [
    { name: "PostPowerConsumption", options: {}, I: PowerConsumptionReport, O: Empty }
], { "ts.server": ["GRPC1_SERVER"] });
