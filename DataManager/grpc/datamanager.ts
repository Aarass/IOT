// @generated by protobuf-ts 2.11.1 with parameter long_type_string
// @generated from protobuf file "datamanager.proto" (syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * @generated from protobuf message PowerConsumption
 */
export interface PowerConsumption {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
    /**
     * @generated from protobuf field: string sensor_id = 2
     */
    sensorId: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp datetime = 3
     */
    datetime?: Timestamp;
    /**
     * @generated from protobuf field: float active_energy = 4
     */
    activeEnergy: number;
    /**
     * @generated from protobuf field: float global_reactive_power = 5
     */
    globalReactivePower: number;
    /**
     * @generated from protobuf field: float voltage = 6
     */
    voltage: number;
    /**
     * @generated from protobuf field: float global_intensity = 7
     */
    globalIntensity: number;
}
/**
 * @generated from protobuf message GetPowerConsumptionRequest
 */
export interface GetPowerConsumptionRequest {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
}
/**
 * @generated from protobuf message DeletePowerConsumptionRequest
 */
export interface DeletePowerConsumptionRequest {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
}
/**
 * @generated from protobuf message PostPowerConsumptionRequest
 */
export interface PostPowerConsumptionRequest {
    /**
     * @generated from protobuf field: string sensor_id = 1
     */
    sensorId: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp datetime = 2
     */
    datetime?: Timestamp;
    /**
     * @generated from protobuf field: float active_energy = 3
     */
    activeEnergy: number;
    /**
     * @generated from protobuf field: float global_reactive_power = 4
     */
    globalReactivePower: number;
    /**
     * @generated from protobuf field: float voltage = 5
     */
    voltage: number;
    /**
     * @generated from protobuf field: float global_intensity = 6
     */
    globalIntensity: number;
}
/**
 * @generated from protobuf message UpdatePowerConsumptionRequest
 */
export interface UpdatePowerConsumptionRequest {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
    /**
     * @generated from protobuf field: string sensor_id = 2
     */
    sensorId: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp datetime = 3
     */
    datetime?: Timestamp;
    /**
     * @generated from protobuf field: float active_energy = 4
     */
    activeEnergy: number;
    /**
     * @generated from protobuf field: float global_reactive_power = 5
     */
    globalReactivePower: number;
    /**
     * @generated from protobuf field: float voltage = 6
     */
    voltage: number;
    /**
     * @generated from protobuf field: float global_intensity = 7
     */
    globalIntensity: number;
}
/**
 * @generated from protobuf message IdWithInterval
 */
export interface IdWithInterval {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
    /**
     * @generated from protobuf field: optional google.protobuf.Timestamp after = 2
     */
    after?: Timestamp;
    /**
     * @generated from protobuf field: optional google.protobuf.Timestamp before = 3
     */
    before?: Timestamp;
}
/**
 * @generated from protobuf message PowerConsumptionValues
 */
export interface PowerConsumptionValues {
    /**
     * @generated from protobuf field: float active_energy = 1
     */
    activeEnergy: number;
    /**
     * @generated from protobuf field: float global_reactive_power = 2
     */
    globalReactivePower: number;
    /**
     * @generated from protobuf field: float voltage = 3
     */
    voltage: number;
    /**
     * @generated from protobuf field: float global_intensity = 4
     */
    globalIntensity: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class PowerConsumption$Type extends MessageType<PowerConsumption> {
    constructor() {
        super("PowerConsumption", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "sensor_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "datetime", kind: "message", T: () => Timestamp },
            { no: 4, name: "active_energy", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "global_reactive_power", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 6, name: "voltage", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 7, name: "global_intensity", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<PowerConsumption>): PowerConsumption {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.sensorId = "";
        message.activeEnergy = 0;
        message.globalReactivePower = 0;
        message.voltage = 0;
        message.globalIntensity = 0;
        if (value !== undefined)
            reflectionMergePartial<PowerConsumption>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PowerConsumption): PowerConsumption {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string sensor_id */ 2:
                    message.sensorId = reader.string();
                    break;
                case /* google.protobuf.Timestamp datetime */ 3:
                    message.datetime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.datetime);
                    break;
                case /* float active_energy */ 4:
                    message.activeEnergy = reader.float();
                    break;
                case /* float global_reactive_power */ 5:
                    message.globalReactivePower = reader.float();
                    break;
                case /* float voltage */ 6:
                    message.voltage = reader.float();
                    break;
                case /* float global_intensity */ 7:
                    message.globalIntensity = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PowerConsumption, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string sensor_id = 2; */
        if (message.sensorId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sensorId);
        /* google.protobuf.Timestamp datetime = 3; */
        if (message.datetime)
            Timestamp.internalBinaryWrite(message.datetime, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* float active_energy = 4; */
        if (message.activeEnergy !== 0)
            writer.tag(4, WireType.Bit32).float(message.activeEnergy);
        /* float global_reactive_power = 5; */
        if (message.globalReactivePower !== 0)
            writer.tag(5, WireType.Bit32).float(message.globalReactivePower);
        /* float voltage = 6; */
        if (message.voltage !== 0)
            writer.tag(6, WireType.Bit32).float(message.voltage);
        /* float global_intensity = 7; */
        if (message.globalIntensity !== 0)
            writer.tag(7, WireType.Bit32).float(message.globalIntensity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PowerConsumption
 */
export const PowerConsumption = new PowerConsumption$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPowerConsumptionRequest$Type extends MessageType<GetPowerConsumptionRequest> {
    constructor() {
        super("GetPowerConsumptionRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetPowerConsumptionRequest>): GetPowerConsumptionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<GetPowerConsumptionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPowerConsumptionRequest): GetPowerConsumptionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPowerConsumptionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetPowerConsumptionRequest
 */
export const GetPowerConsumptionRequest = new GetPowerConsumptionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeletePowerConsumptionRequest$Type extends MessageType<DeletePowerConsumptionRequest> {
    constructor() {
        super("DeletePowerConsumptionRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeletePowerConsumptionRequest>): DeletePowerConsumptionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<DeletePowerConsumptionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeletePowerConsumptionRequest): DeletePowerConsumptionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeletePowerConsumptionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeletePowerConsumptionRequest
 */
export const DeletePowerConsumptionRequest = new DeletePowerConsumptionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PostPowerConsumptionRequest$Type extends MessageType<PostPowerConsumptionRequest> {
    constructor() {
        super("PostPowerConsumptionRequest", [
            { no: 1, name: "sensor_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "datetime", kind: "message", T: () => Timestamp },
            { no: 3, name: "active_energy", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "global_reactive_power", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "voltage", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 6, name: "global_intensity", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<PostPowerConsumptionRequest>): PostPowerConsumptionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sensorId = "";
        message.activeEnergy = 0;
        message.globalReactivePower = 0;
        message.voltage = 0;
        message.globalIntensity = 0;
        if (value !== undefined)
            reflectionMergePartial<PostPowerConsumptionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PostPowerConsumptionRequest): PostPowerConsumptionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sensor_id */ 1:
                    message.sensorId = reader.string();
                    break;
                case /* google.protobuf.Timestamp datetime */ 2:
                    message.datetime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.datetime);
                    break;
                case /* float active_energy */ 3:
                    message.activeEnergy = reader.float();
                    break;
                case /* float global_reactive_power */ 4:
                    message.globalReactivePower = reader.float();
                    break;
                case /* float voltage */ 5:
                    message.voltage = reader.float();
                    break;
                case /* float global_intensity */ 6:
                    message.globalIntensity = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PostPowerConsumptionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sensor_id = 1; */
        if (message.sensorId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sensorId);
        /* google.protobuf.Timestamp datetime = 2; */
        if (message.datetime)
            Timestamp.internalBinaryWrite(message.datetime, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* float active_energy = 3; */
        if (message.activeEnergy !== 0)
            writer.tag(3, WireType.Bit32).float(message.activeEnergy);
        /* float global_reactive_power = 4; */
        if (message.globalReactivePower !== 0)
            writer.tag(4, WireType.Bit32).float(message.globalReactivePower);
        /* float voltage = 5; */
        if (message.voltage !== 0)
            writer.tag(5, WireType.Bit32).float(message.voltage);
        /* float global_intensity = 6; */
        if (message.globalIntensity !== 0)
            writer.tag(6, WireType.Bit32).float(message.globalIntensity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PostPowerConsumptionRequest
 */
export const PostPowerConsumptionRequest = new PostPowerConsumptionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatePowerConsumptionRequest$Type extends MessageType<UpdatePowerConsumptionRequest> {
    constructor() {
        super("UpdatePowerConsumptionRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "sensor_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "datetime", kind: "message", T: () => Timestamp },
            { no: 4, name: "active_energy", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "global_reactive_power", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 6, name: "voltage", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 7, name: "global_intensity", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<UpdatePowerConsumptionRequest>): UpdatePowerConsumptionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.sensorId = "";
        message.activeEnergy = 0;
        message.globalReactivePower = 0;
        message.voltage = 0;
        message.globalIntensity = 0;
        if (value !== undefined)
            reflectionMergePartial<UpdatePowerConsumptionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdatePowerConsumptionRequest): UpdatePowerConsumptionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string sensor_id */ 2:
                    message.sensorId = reader.string();
                    break;
                case /* google.protobuf.Timestamp datetime */ 3:
                    message.datetime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.datetime);
                    break;
                case /* float active_energy */ 4:
                    message.activeEnergy = reader.float();
                    break;
                case /* float global_reactive_power */ 5:
                    message.globalReactivePower = reader.float();
                    break;
                case /* float voltage */ 6:
                    message.voltage = reader.float();
                    break;
                case /* float global_intensity */ 7:
                    message.globalIntensity = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdatePowerConsumptionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string sensor_id = 2; */
        if (message.sensorId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sensorId);
        /* google.protobuf.Timestamp datetime = 3; */
        if (message.datetime)
            Timestamp.internalBinaryWrite(message.datetime, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* float active_energy = 4; */
        if (message.activeEnergy !== 0)
            writer.tag(4, WireType.Bit32).float(message.activeEnergy);
        /* float global_reactive_power = 5; */
        if (message.globalReactivePower !== 0)
            writer.tag(5, WireType.Bit32).float(message.globalReactivePower);
        /* float voltage = 6; */
        if (message.voltage !== 0)
            writer.tag(6, WireType.Bit32).float(message.voltage);
        /* float global_intensity = 7; */
        if (message.globalIntensity !== 0)
            writer.tag(7, WireType.Bit32).float(message.globalIntensity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdatePowerConsumptionRequest
 */
export const UpdatePowerConsumptionRequest = new UpdatePowerConsumptionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IdWithInterval$Type extends MessageType<IdWithInterval> {
    constructor() {
        super("IdWithInterval", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "after", kind: "message", T: () => Timestamp },
            { no: 3, name: "before", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<IdWithInterval>): IdWithInterval {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<IdWithInterval>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IdWithInterval): IdWithInterval {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* optional google.protobuf.Timestamp after */ 2:
                    message.after = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.after);
                    break;
                case /* optional google.protobuf.Timestamp before */ 3:
                    message.before = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.before);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IdWithInterval, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* optional google.protobuf.Timestamp after = 2; */
        if (message.after)
            Timestamp.internalBinaryWrite(message.after, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional google.protobuf.Timestamp before = 3; */
        if (message.before)
            Timestamp.internalBinaryWrite(message.before, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IdWithInterval
 */
export const IdWithInterval = new IdWithInterval$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PowerConsumptionValues$Type extends MessageType<PowerConsumptionValues> {
    constructor() {
        super("PowerConsumptionValues", [
            { no: 1, name: "active_energy", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "global_reactive_power", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "voltage", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "global_intensity", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<PowerConsumptionValues>): PowerConsumptionValues {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.activeEnergy = 0;
        message.globalReactivePower = 0;
        message.voltage = 0;
        message.globalIntensity = 0;
        if (value !== undefined)
            reflectionMergePartial<PowerConsumptionValues>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PowerConsumptionValues): PowerConsumptionValues {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float active_energy */ 1:
                    message.activeEnergy = reader.float();
                    break;
                case /* float global_reactive_power */ 2:
                    message.globalReactivePower = reader.float();
                    break;
                case /* float voltage */ 3:
                    message.voltage = reader.float();
                    break;
                case /* float global_intensity */ 4:
                    message.globalIntensity = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PowerConsumptionValues, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float active_energy = 1; */
        if (message.activeEnergy !== 0)
            writer.tag(1, WireType.Bit32).float(message.activeEnergy);
        /* float global_reactive_power = 2; */
        if (message.globalReactivePower !== 0)
            writer.tag(2, WireType.Bit32).float(message.globalReactivePower);
        /* float voltage = 3; */
        if (message.voltage !== 0)
            writer.tag(3, WireType.Bit32).float(message.voltage);
        /* float global_intensity = 4; */
        if (message.globalIntensity !== 0)
            writer.tag(4, WireType.Bit32).float(message.globalIntensity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PowerConsumptionValues
 */
export const PowerConsumptionValues = new PowerConsumptionValues$Type();
/**
 * @generated ServiceType for protobuf service DataManager
 */
export const DataManager = new ServiceType("DataManager", [
    { name: "PostPowerConsumption", options: {}, I: PostPowerConsumptionRequest, O: PowerConsumption },
    { name: "GetPowerConsumption", options: {}, I: GetPowerConsumptionRequest, O: PowerConsumption },
    { name: "DeletePowerConsumption", options: {}, I: DeletePowerConsumptionRequest, O: PowerConsumption },
    { name: "UpdatePowerConsumption", options: {}, I: UpdatePowerConsumptionRequest, O: PowerConsumption },
    { name: "GetAvgPowerConsumption", options: {}, I: IdWithInterval, O: PowerConsumptionValues },
    { name: "GetSumPowerConsumption", options: {}, I: IdWithInterval, O: PowerConsumptionValues },
    { name: "GetMinPowerConsumption", options: {}, I: IdWithInterval, O: PowerConsumptionValues },
    { name: "GetMaxPowerConsumption", options: {}, I: IdWithInterval, O: PowerConsumptionValues }
], { "ts.server": ["GRPC1_SERVER"] });
