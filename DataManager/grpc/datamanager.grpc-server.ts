// @generated by protobuf-ts 2.11.1 with parameter long_type_string,server_grpc1,force_client_none
// @generated from protobuf file "datamanager.proto" (syntax proto3)
// tslint:disable
import { PowerConsumptionValues } from "./datamanager";
import { IdWithInterval } from "./datamanager";
import { UpdatePowerConsumptionRequest } from "./datamanager";
import { DeletePowerConsumptionRequest } from "./datamanager";
import { GetPowerConsumptionRequest } from "./datamanager";
import { PowerConsumption } from "./datamanager";
import { PostPowerConsumptionRequest } from "./datamanager";
import type * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service DataManager
 */
export interface IDataManager extends grpc.UntypedServiceImplementation {
    /**
     * @generated from protobuf rpc: PostPowerConsumption
     */
    postPowerConsumption: grpc.handleUnaryCall<PostPowerConsumptionRequest, PowerConsumption>;
    /**
     * @generated from protobuf rpc: GetPowerConsumption
     */
    getPowerConsumption: grpc.handleUnaryCall<GetPowerConsumptionRequest, PowerConsumption>;
    /**
     * @generated from protobuf rpc: DeletePowerConsumption
     */
    deletePowerConsumption: grpc.handleUnaryCall<DeletePowerConsumptionRequest, PowerConsumption>;
    /**
     * @generated from protobuf rpc: UpdatePowerConsumption
     */
    updatePowerConsumption: grpc.handleUnaryCall<UpdatePowerConsumptionRequest, PowerConsumption>;
    /**
     * @generated from protobuf rpc: GetAvgPowerConsumption
     */
    getAvgPowerConsumption: grpc.handleUnaryCall<IdWithInterval, PowerConsumptionValues>;
    /**
     * @generated from protobuf rpc: GetSumPowerConsumption
     */
    getSumPowerConsumption: grpc.handleUnaryCall<IdWithInterval, PowerConsumptionValues>;
    /**
     * @generated from protobuf rpc: GetMinPowerConsumption
     */
    getMinPowerConsumption: grpc.handleUnaryCall<IdWithInterval, PowerConsumptionValues>;
    /**
     * @generated from protobuf rpc: GetMaxPowerConsumption
     */
    getMaxPowerConsumption: grpc.handleUnaryCall<IdWithInterval, PowerConsumptionValues>;
}
/**
 * @grpc/grpc-js definition for the protobuf service DataManager.
 *
 * Usage: Implement the interface IDataManager and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: IDataManager = ...
 * server.addService(dataManagerDefinition, service);
 * ```
 */
export const dataManagerDefinition: grpc.ServiceDefinition<IDataManager> = {
    postPowerConsumption: {
        path: "/DataManager/PostPowerConsumption",
        originalName: "PostPowerConsumption",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => PowerConsumption.fromBinary(bytes),
        requestDeserialize: bytes => PostPowerConsumptionRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(PowerConsumption.toBinary(value)),
        requestSerialize: value => Buffer.from(PostPowerConsumptionRequest.toBinary(value))
    },
    getPowerConsumption: {
        path: "/DataManager/GetPowerConsumption",
        originalName: "GetPowerConsumption",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => PowerConsumption.fromBinary(bytes),
        requestDeserialize: bytes => GetPowerConsumptionRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(PowerConsumption.toBinary(value)),
        requestSerialize: value => Buffer.from(GetPowerConsumptionRequest.toBinary(value))
    },
    deletePowerConsumption: {
        path: "/DataManager/DeletePowerConsumption",
        originalName: "DeletePowerConsumption",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => PowerConsumption.fromBinary(bytes),
        requestDeserialize: bytes => DeletePowerConsumptionRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(PowerConsumption.toBinary(value)),
        requestSerialize: value => Buffer.from(DeletePowerConsumptionRequest.toBinary(value))
    },
    updatePowerConsumption: {
        path: "/DataManager/UpdatePowerConsumption",
        originalName: "UpdatePowerConsumption",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => PowerConsumption.fromBinary(bytes),
        requestDeserialize: bytes => UpdatePowerConsumptionRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(PowerConsumption.toBinary(value)),
        requestSerialize: value => Buffer.from(UpdatePowerConsumptionRequest.toBinary(value))
    },
    getAvgPowerConsumption: {
        path: "/DataManager/GetAvgPowerConsumption",
        originalName: "GetAvgPowerConsumption",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => PowerConsumptionValues.fromBinary(bytes),
        requestDeserialize: bytes => IdWithInterval.fromBinary(bytes),
        responseSerialize: value => Buffer.from(PowerConsumptionValues.toBinary(value)),
        requestSerialize: value => Buffer.from(IdWithInterval.toBinary(value))
    },
    getSumPowerConsumption: {
        path: "/DataManager/GetSumPowerConsumption",
        originalName: "GetSumPowerConsumption",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => PowerConsumptionValues.fromBinary(bytes),
        requestDeserialize: bytes => IdWithInterval.fromBinary(bytes),
        responseSerialize: value => Buffer.from(PowerConsumptionValues.toBinary(value)),
        requestSerialize: value => Buffer.from(IdWithInterval.toBinary(value))
    },
    getMinPowerConsumption: {
        path: "/DataManager/GetMinPowerConsumption",
        originalName: "GetMinPowerConsumption",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => PowerConsumptionValues.fromBinary(bytes),
        requestDeserialize: bytes => IdWithInterval.fromBinary(bytes),
        responseSerialize: value => Buffer.from(PowerConsumptionValues.toBinary(value)),
        requestSerialize: value => Buffer.from(IdWithInterval.toBinary(value))
    },
    getMaxPowerConsumption: {
        path: "/DataManager/GetMaxPowerConsumption",
        originalName: "GetMaxPowerConsumption",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => PowerConsumptionValues.fromBinary(bytes),
        requestDeserialize: bytes => IdWithInterval.fromBinary(bytes),
        responseSerialize: value => Buffer.from(PowerConsumptionValues.toBinary(value)),
        requestSerialize: value => Buffer.from(IdWithInterval.toBinary(value))
    }
};
