// @generated by protobuf-ts 2.11.1 with parameter long_type_string
// @generated from protobuf file "datamanager.proto" (syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { DataManager } from "./datamanager";
import type { PowerConsumptionValues } from "./datamanager";
import type { IdWithInterval } from "./datamanager";
import type { UpdatePowerConsumptionRequest } from "./datamanager";
import type { DeletePowerConsumptionRequest } from "./datamanager";
import type { GetPowerConsumptionRequest } from "./datamanager";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { PowerConsumption } from "./datamanager";
import type { PostPowerConsumptionRequest } from "./datamanager";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service DataManager
 */
export interface IDataManagerClient {
    /**
     * @generated from protobuf rpc: PostPowerConsumption
     */
    postPowerConsumption(input: PostPowerConsumptionRequest, options?: RpcOptions): UnaryCall<PostPowerConsumptionRequest, PowerConsumption>;
    /**
     * @generated from protobuf rpc: GetPowerConsumption
     */
    getPowerConsumption(input: GetPowerConsumptionRequest, options?: RpcOptions): UnaryCall<GetPowerConsumptionRequest, PowerConsumption>;
    /**
     * @generated from protobuf rpc: DeletePowerConsumption
     */
    deletePowerConsumption(input: DeletePowerConsumptionRequest, options?: RpcOptions): UnaryCall<DeletePowerConsumptionRequest, PowerConsumption>;
    /**
     * @generated from protobuf rpc: UpdatePowerConsumption
     */
    updatePowerConsumption(input: UpdatePowerConsumptionRequest, options?: RpcOptions): UnaryCall<UpdatePowerConsumptionRequest, PowerConsumption>;
    /**
     * @generated from protobuf rpc: GetAvgPowerConsumption
     */
    getAvgPowerConsumption(input: IdWithInterval, options?: RpcOptions): UnaryCall<IdWithInterval, PowerConsumptionValues>;
    /**
     * @generated from protobuf rpc: GetSumPowerConsumption
     */
    getSumPowerConsumption(input: IdWithInterval, options?: RpcOptions): UnaryCall<IdWithInterval, PowerConsumptionValues>;
    /**
     * @generated from protobuf rpc: GetMinPowerConsumption
     */
    getMinPowerConsumption(input: IdWithInterval, options?: RpcOptions): UnaryCall<IdWithInterval, PowerConsumptionValues>;
    /**
     * @generated from protobuf rpc: GetMaxPowerConsumption
     */
    getMaxPowerConsumption(input: IdWithInterval, options?: RpcOptions): UnaryCall<IdWithInterval, PowerConsumptionValues>;
}
/**
 * @generated from protobuf service DataManager
 */
export class DataManagerClient implements IDataManagerClient, ServiceInfo {
    typeName = DataManager.typeName;
    methods = DataManager.methods;
    options = DataManager.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: PostPowerConsumption
     */
    postPowerConsumption(input: PostPowerConsumptionRequest, options?: RpcOptions): UnaryCall<PostPowerConsumptionRequest, PowerConsumption> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<PostPowerConsumptionRequest, PowerConsumption>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetPowerConsumption
     */
    getPowerConsumption(input: GetPowerConsumptionRequest, options?: RpcOptions): UnaryCall<GetPowerConsumptionRequest, PowerConsumption> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetPowerConsumptionRequest, PowerConsumption>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeletePowerConsumption
     */
    deletePowerConsumption(input: DeletePowerConsumptionRequest, options?: RpcOptions): UnaryCall<DeletePowerConsumptionRequest, PowerConsumption> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeletePowerConsumptionRequest, PowerConsumption>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdatePowerConsumption
     */
    updatePowerConsumption(input: UpdatePowerConsumptionRequest, options?: RpcOptions): UnaryCall<UpdatePowerConsumptionRequest, PowerConsumption> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdatePowerConsumptionRequest, PowerConsumption>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetAvgPowerConsumption
     */
    getAvgPowerConsumption(input: IdWithInterval, options?: RpcOptions): UnaryCall<IdWithInterval, PowerConsumptionValues> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<IdWithInterval, PowerConsumptionValues>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetSumPowerConsumption
     */
    getSumPowerConsumption(input: IdWithInterval, options?: RpcOptions): UnaryCall<IdWithInterval, PowerConsumptionValues> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<IdWithInterval, PowerConsumptionValues>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetMinPowerConsumption
     */
    getMinPowerConsumption(input: IdWithInterval, options?: RpcOptions): UnaryCall<IdWithInterval, PowerConsumptionValues> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<IdWithInterval, PowerConsumptionValues>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetMaxPowerConsumption
     */
    getMaxPowerConsumption(input: IdWithInterval, options?: RpcOptions): UnaryCall<IdWithInterval, PowerConsumptionValues> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<IdWithInterval, PowerConsumptionValues>("unary", this._transport, method, opt, input);
    }
}
